#!/usr/bin/env python3

import os, sys
import argparse

class VideoTrimTool:
  def __init__(self):
    pass

  def _parse(self, ifile):
    root = os.path.dirname(os.path.abspath(ifile))

    file = open(ifile, 'r')
    lines = file.readlines()
    file.close()

    output_dir = os.path.join(root, 'trimmed')
    os.makedirs(output_dir, exist_ok=True)

    videos = []

    for line in lines:

      # ignore comments
      if not line.startswith('#'):
        pieces = line.split()

        if len(pieces) != 3:
          raise RuntimeError(f"could not parse line '{line}'")
          continue

        file, start, end = pieces
        fullfile = os.path.join(root, file)
        
        video = {
          'basename': os.path.basename(fullfile),
          'target': os.path.join(output_dir, os.path.basename(fullfile)),
          'fullfile': fullfile,
          'start': int(start),
          'end': int(end),
          'duration': int(end) - int(start)
        }
        videos.append(video)

    return videos


  def create_template_file(self, ifile):
    root = os.path.dirname(os.path.abspath(ifile))

    # get all the files in the directory of interest
    files = [f for f in os.listdir(root) 
              if os.path.isfile(os.path.join(root, f))
                    and not f.startswith('.')]

    # open a file for writing
    file = open(ifile, 'w')
    file.write('# autogenerated file\n')

    for f in files:
      file.write(f"{f} 0 0\n")

    file.close()


  def trim(self, file):
    videos = self._parse(file)
    
    for v in videos:
      print()
      print(f"Processing {os.path.basename(v['basename'])} ({v['duration']} seconds)")
      
      os.system(f"ffmpeg -y -i {v['fullfile']} -ss {v['start']} -t {v['duration']} -c copy {v['target']}")

if __name__ == '__main__':
  parser = argparse.ArgumentParser(add_help=True, description="Select a state request to test mission manager with")
  group = parser.add_mutually_exclusive_group(required=True)
  group.add_argument('-i', '--input', help="Path to video trim tool instruction text file")
  group.add_argument('-t', '--template', help="Directory in which to create a template for")

  args = parser.parse_args()

  vtt = VideoTrimTool()

  if args.input:
    vtt.trim(args.input)

  if args.template:
    file = os.path.join(args.template, 'videotrim.txt')
    vtt.create_template_file(file)

# ffmpeg -ss 65 -i 2021-08-24-21-57-50.MP4 -t 5 -c copy ~/Documents/out.mp4
# ffmpeg -ss 65 -i 2021-08-24-21-57-50.MP4 -c:v libx264 -c:a aac -strict experimental -b:a 128k ~/Documents/out.mp4